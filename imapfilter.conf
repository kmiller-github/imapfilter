# imapfilter configuation file
#

[general]
# See https://docs.python.org/2/library/syslog.html for logging levels
# LOG_EMERG is as disabled as it will go, and is the default
logging = syslog.LOG_INFO

# prototyping - experimental
# The idea here is that there are some registrars that have a large percentage
# of the JUNK mail.  Create a rule that would assume discard, except for some
# small subset of domains.
whois = disable

# Poll time in seconds - Really, delay between polls.  If the email filter
# processing takes 120 seconds, then the total interval time would be 180 
# seconds.  The depends on how many accounts and the number of emails moving
# around.
polltime = 60

[accounts]
# Case is ignored on configuration option names (remotejunkmail and RemoteJunkMail)
# would be the same.
#
# Preceeding/succeeding whitespace is ignored for host, username, and password,
# but case is maintained.
#
# These accounts are substituted into the rules below.
#
local = localhost, username, password
remote = imap.remotehost.com, username, password
# account2 = imap.anotherhost.com, username, password
# RemoteJunkMail = imap.junkmail.com, username, password

[conditions]
# Field , condition: (i) in front of a condition indicates case insensitive
# The parameter string is taken as is between parenthesis, white space and all
conditionTo1 = to,icontains(miller)
conditioncc1 = cc, icontains(miller)
conditionbcc1 = bcc, icontains(miller)
conditionFrom1 = from, iaddressendswith(.com)
conditionFrom2 = from, iaddressendswith(.net)
conditionFrom3 = from, iaddressendswith(.gov)
conditionFrom4 = from, iaddressendswith(.edu)
conditionFrom5 = from, iaddressendswith(.org)
amazonCond1 = from, iaddressendswith(amazon.com)
amazonCond2 = reply-to, iaddressendswith(amazon.com)
# If you really love regular expressions :( ....  Have at it.
regexpexample = references, regexp(.+)

[rules]
# ruleName = account, 
#			precedents, 
#			search directory, 
#			imap search command, 
#			conditions, 
#			True action, 
#			False action (optional)
# For search command options see: 
#	https://tools.ietf.org/html/rfc3501 section 6.4.4.
#
# The search parameter is a python string. You can access any python functions that 
# are imported, date and timedelta are imported from datetime. Other function would
# need the 
#
# 	WARNING: Don't use commas in the search string.
#
# The rules are executed in predents order 1, 2, 3...
#
# The below example returns the all the emails since yesterday in INBOX on the
# local account and moves the message from amazon to amazon on the local account.
rule1 = local, 1, INBOX, 
	'(SENTSINCE {date})'.format(date=(date.today() - timedelta(1)).strftime('%d-%b-%Y')),
	amazonCond1 or amazonCond2,
	moveto(local:amazon)

# This returns all the messages in the remote account's INBOX, moving them to
# Junk or INBOX on the local account
rule2 = remote, 2, INBOX, 
	'ALL',
	not (conditionTo1 or conditioncc1 or conditionbcc1) or 
	not (conditionFrom1 or conditionFrom2 or 
	conditionFrom3 or conditionFrom4 or conditionFrom5) or
	regexpexample,
	moveto(local:Junk), moveto(local:INBOX)
